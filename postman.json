{
	"info": {
		"_postman_id": "712e1fd2-5c2d-4935-8a74-73b05e01ce0f",
		"name": "inft3050",
		"description": "To use this API you must first use the POST Login endpoint to obtain a cookie. The other data endpoints will then function automatically thanks to the Postman Cookie Manager. If you want to clear your login you can use the POST Logout endpoint.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19943305"
	},
	"item": [
		{
			"name": "api",
			"item": [
				{
					"name": "inft3050",
					"item": [
						{
							"name": "BookGenre",
							"item": [
								{
									"name": "{rowId}",
									"item": [
										{
											"name": "BookGenre read",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/BookGenre/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"BookGenre",
														":rowId"
													],
													"query": [
														{
															"key": "fields",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Read a row data by using the **primary key** column value."
											},
											"response": [
												{
													"name": "Created",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/BookGenre/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"BookGenre",
																":rowId"
															],
															"query": [
																{
																	"key": "fields",
																	"value": "<string>",
																	"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"SubGenreID\": \"<integer>\",\n  \"Name\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "BookGenre update",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"Name\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/BookGenre/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"BookGenre",
														":rowId"
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/BookGenre/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"BookGenre",
																":rowId"
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"SubGenreID\": \"<integer>\",\n  \"Name\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "BookGenre delete",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/BookGenre/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"BookGenre",
														":rowId"
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Delete a row by using the **primary key** column value."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/BookGenre/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"BookGenre",
																":rowId"
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "count",
									"item": [
										{
											"name": "BookGenre count",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/BookGenre/count",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"BookGenre",
														"count"
													],
													"query": [
														{
															"key": "where",
															"value": "<string>",
															"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
															"disabled": true
														}
													]
												},
												"description": "Get rows count of a table by applying optional filters."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/BookGenre/count",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"BookGenre",
																"count"
															],
															"query": [
																{
																	"key": "where",
																	"value": "<string>",
																	"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
																	"disabled": true
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										}
									]
								},
								{
									"name": "BookGenre list",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/inft3050/BookGenre",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"inft3050",
												"BookGenre"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>",
													"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "<string>",
													"description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`",
													"disabled": true
												},
												{
													"key": "where",
													"value": "<string>",
													"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "<number>",
													"description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
													"disabled": true
												},
												{
													"key": "shuffle",
													"value": "<number>",
													"description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "<number>",
													"description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
													"disabled": true
												}
											]
										},
										"description": "List of all rows from BookGenre table and response data fields can be filtered based on query params."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "xc-auth",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/BookGenre",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"BookGenre"
													],
													"query": [
														{
															"key": "fields",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
															"disabled": true
														},
														{
															"key": "sort",
															"value": "<string>",
															"description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`",
															"disabled": true
														},
														{
															"key": "where",
															"value": "<string>",
															"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "<number>",
															"description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
															"disabled": true
														},
														{
															"key": "shuffle",
															"value": "<number>",
															"description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
															"disabled": true
														},
														{
															"key": "offset",
															"value": "<number>",
															"description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
															"disabled": true
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"list\": [\n    {\n      \"SubGenreID\": \"<integer>\",\n      \"Name\": \"<string>\"\n    },\n    {\n      \"SubGenreID\": \"<integer>\",\n      \"Name\": \"<string>\"\n    }\n  ],\n  \"PageInfo\": {\n    \"pageSize\": \"<integer>\",\n    \"totalRows\": \"<integer>\",\n    \"isFirstPage\": \"<boolean>\",\n    \"isLastPage\": \"<boolean>\",\n    \"page\": \"<number>\"\n  }\n}"
										}
									]
								},
								{
									"name": "BookGenre create",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/inft3050/BookGenre",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"inft3050",
												"BookGenre"
											]
										},
										"description": "Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "xc-auth",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"SubGenreID\": \"<integer>\",\n  \"Name\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/BookGenre",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"BookGenre"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"SubGenreID\": \"<integer>\",\n  \"Name\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "BookGenre new",
							"item": [
								{
									"name": "{rowId}",
									"item": [
										{
											"name": "BookGenre new read",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/BookGenre new/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"BookGenre new",
														":rowId"
													],
													"query": [
														{
															"key": "fields",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Read a row data by using the **primary key** column value."
											},
											"response": [
												{
													"name": "Created",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/BookGenre new/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"BookGenre new",
																":rowId"
															],
															"query": [
																{
																	"key": "fields",
																	"value": "<string>",
																	"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"SubGenreID\": \"<integer>\",\n  \"Name\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "BookGenre new update",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/BookGenre new/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"BookGenre new",
														":rowId"
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/BookGenre new/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"BookGenre new",
																":rowId"
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"SubGenreID\": \"<integer>\",\n  \"Name\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "BookGenre new delete",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/BookGenre new/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"BookGenre new",
														":rowId"
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Delete a row by using the **primary key** column value."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/BookGenre new/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"BookGenre new",
																":rowId"
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "count",
									"item": [
										{
											"name": "BookGenre new count",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/BookGenre new/count",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"BookGenre new",
														"count"
													],
													"query": [
														{
															"key": "where",
															"value": "<string>",
															"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
															"disabled": true
														}
													]
												},
												"description": "Get rows count of a table by applying optional filters."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/BookGenre new/count",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"BookGenre new",
																"count"
															],
															"query": [
																{
																	"key": "where",
																	"value": "<string>",
																	"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
																	"disabled": true
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										}
									]
								},
								{
									"name": "BookGenre new list",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/inft3050/BookGenre new",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"inft3050",
												"BookGenre new"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>",
													"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "<string>",
													"description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`",
													"disabled": true
												},
												{
													"key": "where",
													"value": "<string>",
													"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "<number>",
													"description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
													"disabled": true
												},
												{
													"key": "shuffle",
													"value": "<number>",
													"description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "<number>",
													"description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
													"disabled": true
												}
											]
										},
										"description": "List of all rows from BookGenre new table and response data fields can be filtered based on query params."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "xc-auth",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/BookGenre new",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"BookGenre new"
													],
													"query": [
														{
															"key": "fields",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
															"disabled": true
														},
														{
															"key": "sort",
															"value": "<string>",
															"description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`",
															"disabled": true
														},
														{
															"key": "where",
															"value": "<string>",
															"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "<number>",
															"description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
															"disabled": true
														},
														{
															"key": "shuffle",
															"value": "<number>",
															"description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
															"disabled": true
														},
														{
															"key": "offset",
															"value": "<number>",
															"description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
															"disabled": true
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"list\": [\n    {\n      \"SubGenreID\": \"<integer>\",\n      \"Name\": \"<string>\"\n    },\n    {\n      \"SubGenreID\": \"<integer>\",\n      \"Name\": \"<string>\"\n    }\n  ],\n  \"PageInfo\": {\n    \"pageSize\": \"<integer>\",\n    \"totalRows\": \"<integer>\",\n    \"isFirstPage\": \"<boolean>\",\n    \"isLastPage\": \"<boolean>\",\n    \"page\": \"<number>\"\n  }\n}"
										}
									]
								},
								{
									"name": "BookGenre new create",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"SubGenreID\": \"<integer>\",\n  \"Name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/inft3050/BookGenre new",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"inft3050",
												"BookGenre new"
											]
										},
										"description": "Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "xc-auth",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"SubGenreID\": \"<integer>\",\n  \"Name\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/BookGenre new",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"BookGenre new"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"SubGenreID\": \"<integer>\",\n  \"Name\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "GameGenre",
							"item": [
								{
									"name": "{rowId}",
									"item": [
										{
											"name": "GameGenre read",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/GameGenre/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"GameGenre",
														":rowId"
													],
													"query": [
														{
															"key": "fields",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Read a row data by using the **primary key** column value."
											},
											"response": [
												{
													"name": "Created",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/GameGenre/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"GameGenre",
																":rowId"
															],
															"query": [
																{
																	"key": "fields",
																	"value": "<string>",
																	"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"SubGenreID\": \"<integer>\",\n  \"Name\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "GameGenre update",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/GameGenre/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"GameGenre",
														":rowId"
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/GameGenre/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"GameGenre",
																":rowId"
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"SubGenreID\": \"<integer>\",\n  \"Name\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "GameGenre delete",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/GameGenre/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"GameGenre",
														":rowId"
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Delete a row by using the **primary key** column value."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/GameGenre/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"GameGenre",
																":rowId"
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "count",
									"item": [
										{
											"name": "GameGenre count",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/GameGenre/count",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"GameGenre",
														"count"
													],
													"query": [
														{
															"key": "where",
															"value": "<string>",
															"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
															"disabled": true
														}
													]
												},
												"description": "Get rows count of a table by applying optional filters."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/GameGenre/count",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"GameGenre",
																"count"
															],
															"query": [
																{
																	"key": "where",
																	"value": "<string>",
																	"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
																	"disabled": true
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										}
									]
								},
								{
									"name": "GameGenre list",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/inft3050/GameGenre",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"inft3050",
												"GameGenre"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>",
													"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "<string>",
													"description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`",
													"disabled": true
												},
												{
													"key": "where",
													"value": "<string>",
													"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "<number>",
													"description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
													"disabled": true
												},
												{
													"key": "shuffle",
													"value": "<number>",
													"description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "<number>",
													"description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
													"disabled": true
												}
											]
										},
										"description": "List of all rows from GameGenre table and response data fields can be filtered based on query params."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "xc-auth",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/GameGenre",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"GameGenre"
													],
													"query": [
														{
															"key": "fields",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
															"disabled": true
														},
														{
															"key": "sort",
															"value": "<string>",
															"description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`",
															"disabled": true
														},
														{
															"key": "where",
															"value": "<string>",
															"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "<number>",
															"description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
															"disabled": true
														},
														{
															"key": "shuffle",
															"value": "<number>",
															"description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
															"disabled": true
														},
														{
															"key": "offset",
															"value": "<number>",
															"description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
															"disabled": true
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"list\": [\n    {\n      \"SubGenreID\": \"<integer>\",\n      \"Name\": \"<string>\"\n    },\n    {\n      \"SubGenreID\": \"<integer>\",\n      \"Name\": \"<string>\"\n    }\n  ],\n  \"PageInfo\": {\n    \"pageSize\": \"<integer>\",\n    \"totalRows\": \"<integer>\",\n    \"isFirstPage\": \"<boolean>\",\n    \"isLastPage\": \"<boolean>\",\n    \"page\": \"<number>\"\n  }\n}"
										}
									]
								},
								{
									"name": "GameGenre create",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"SubGenreID\": \"<integer>\",\n  \"Name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/inft3050/GameGenre",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"inft3050",
												"GameGenre"
											]
										},
										"description": "Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "xc-auth",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"SubGenreID\": \"<integer>\",\n  \"Name\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/GameGenre",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"GameGenre"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"SubGenreID\": \"<integer>\",\n  \"Name\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Genre",
							"item": [
								{
									"name": "{rowId}",
									"item": [
										{
											"name": "Genre read",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Genre/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Genre",
														":rowId"
													],
													"query": [
														{
															"key": "fields",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Read a row data by using the **primary key** column value."
											},
											"response": [
												{
													"name": "Created",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/Genre/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"Genre",
																":rowId"
															],
															"query": [
																{
																	"key": "fields",
																	"value": "<string>",
																	"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"GenreID\": \"<integer>\",\n  \"Name\": \"<string>\",\n  \"Product List\": {\n    \"ID\": \"<integer>\",\n    \"Name\": \"<string>\",\n    \"Author\": \"<string>\",\n    \"Description\": \"<string>\",\n    \"Genre\": \"<integer>\",\n    \"SubGenre\": \"<integer>\",\n    \"Published\": \"<string>\",\n    \"LastUpdatedBy\": \"<string>\",\n    \"LastUpdated\": \"<string>\"\n  },\n  \"Source List\": {\n    \"Sourceid\": \"<integer>\",\n    \"SourceName\": \"<string>\",\n    \"ExternalLink\": \"<string>\",\n    \"Genre\": \"<integer>\"\n  }\n}"
												}
											]
										},
										{
											"name": "Genre update",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Genre/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Genre",
														":rowId"
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/Genre/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"Genre",
																":rowId"
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"GenreID\": \"<integer>\",\n  \"Name\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "Genre delete",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Genre/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Genre",
														":rowId"
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Delete a row by using the **primary key** column value."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/Genre/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"Genre",
																":rowId"
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "count",
									"item": [
										{
											"name": "Genre count",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Genre/count",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Genre",
														"count"
													],
													"query": [
														{
															"key": "where",
															"value": "<string>",
															"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
															"disabled": true
														}
													]
												},
												"description": "Get rows count of a table by applying optional filters."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/Genre/count",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"Genre",
																"count"
															],
															"query": [
																{
																	"key": "where",
																	"value": "<string>",
																	"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
																	"disabled": true
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										}
									]
								},
								{
									"name": "Genre list",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/inft3050/Genre",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"inft3050",
												"Genre"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>",
													"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "<string>",
													"description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`",
													"disabled": true
												},
												{
													"key": "where",
													"value": "<string>",
													"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "<number>",
													"description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
													"disabled": true
												},
												{
													"key": "shuffle",
													"value": "<number>",
													"description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "<number>",
													"description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
													"disabled": true
												},
												{
													"key": "nested[Product List][where]",
													"value": "<string>",
													"description": "This can be used for filtering rows in nested column `Product List`, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `nested[Product List][where]=(field1,eq,value)`",
													"disabled": true
												},
												{
													"key": "nested[Product List][offset]",
													"value": "<number>",
													"description": "The `offset` parameter used for pagination  of nested `Product List` rows, the value helps to select collection from a certain index.",
													"disabled": true
												},
												{
													"key": "nested[Product List][limit]",
													"value": "<number>",
													"description": "The `limit` parameter used for pagination of nested `Product List` rows, the response collection size depends on limit value and default value is `25`.",
													"disabled": true
												},
												{
													"key": "nested[Product List][fields]",
													"value": "<string>",
													"description": "Array of field names or comma separated filed names to include in the in nested column `Product List` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Product List][fields]=field1,field2`",
													"disabled": true
												},
												{
													"key": "nested[Product List][sort]",
													"value": "<string>",
													"description": "Comma separated field names to sort rows in nested column `Product List` rows, it will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `nested[Product List][sort]=field1,-field2`",
													"disabled": true
												},
												{
													"key": "nested[Source List][where]",
													"value": "<string>",
													"description": "This can be used for filtering rows in nested column `Source List`, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `nested[Source List][where]=(field1,eq,value)`",
													"disabled": true
												},
												{
													"key": "nested[Source List][offset]",
													"value": "<number>",
													"description": "The `offset` parameter used for pagination  of nested `Source List` rows, the value helps to select collection from a certain index.",
													"disabled": true
												},
												{
													"key": "nested[Source List][limit]",
													"value": "<number>",
													"description": "The `limit` parameter used for pagination of nested `Source List` rows, the response collection size depends on limit value and default value is `25`.",
													"disabled": true
												},
												{
													"key": "nested[Source List][fields]",
													"value": "<string>",
													"description": "Array of field names or comma separated filed names to include in the in nested column `Source List` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Source List][fields]=field1,field2`",
													"disabled": true
												},
												{
													"key": "nested[Source List][sort]",
													"value": "<string>",
													"description": "Comma separated field names to sort rows in nested column `Source List` rows, it will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `nested[Source List][sort]=field1,-field2`",
													"disabled": true
												}
											]
										},
										"description": "List of all rows from Genre table and response data fields can be filtered based on query params."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "xc-auth",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Genre",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Genre"
													],
													"query": [
														{
															"key": "fields",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
															"disabled": true
														},
														{
															"key": "sort",
															"value": "<string>",
															"description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`",
															"disabled": true
														},
														{
															"key": "where",
															"value": "<string>",
															"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "<number>",
															"description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
															"disabled": true
														},
														{
															"key": "shuffle",
															"value": "<number>",
															"description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
															"disabled": true
														},
														{
															"key": "offset",
															"value": "<number>",
															"description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
															"disabled": true
														},
														{
															"key": "nested[Product List][where]",
															"value": "<string>",
															"description": "This can be used for filtering rows in nested column `Product List`, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `nested[Product List][where]=(field1,eq,value)`",
															"disabled": true
														},
														{
															"key": "nested[Product List][offset]",
															"value": "<number>",
															"description": "The `offset` parameter used for pagination  of nested `Product List` rows, the value helps to select collection from a certain index.",
															"disabled": true
														},
														{
															"key": "nested[Product List][limit]",
															"value": "<number>",
															"description": "The `limit` parameter used for pagination of nested `Product List` rows, the response collection size depends on limit value and default value is `25`.",
															"disabled": true
														},
														{
															"key": "nested[Product List][fields]",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the in nested column `Product List` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Product List][fields]=field1,field2`",
															"disabled": true
														},
														{
															"key": "nested[Product List][sort]",
															"value": "<string>",
															"description": "Comma separated field names to sort rows in nested column `Product List` rows, it will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `nested[Product List][sort]=field1,-field2`",
															"disabled": true
														},
														{
															"key": "nested[Source List][where]",
															"value": "<string>",
															"description": "This can be used for filtering rows in nested column `Source List`, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `nested[Source List][where]=(field1,eq,value)`",
															"disabled": true
														},
														{
															"key": "nested[Source List][offset]",
															"value": "<number>",
															"description": "The `offset` parameter used for pagination  of nested `Source List` rows, the value helps to select collection from a certain index.",
															"disabled": true
														},
														{
															"key": "nested[Source List][limit]",
															"value": "<number>",
															"description": "The `limit` parameter used for pagination of nested `Source List` rows, the response collection size depends on limit value and default value is `25`.",
															"disabled": true
														},
														{
															"key": "nested[Source List][fields]",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the in nested column `Source List` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Source List][fields]=field1,field2`",
															"disabled": true
														},
														{
															"key": "nested[Source List][sort]",
															"value": "<string>",
															"description": "Comma separated field names to sort rows in nested column `Source List` rows, it will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `nested[Source List][sort]=field1,-field2`",
															"disabled": true
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"list\": [\n    {\n      \"GenreID\": \"<integer>\",\n      \"Name\": \"<string>\",\n      \"Product List\": {\n        \"ID\": \"<integer>\",\n        \"Name\": \"<string>\",\n        \"Author\": \"<string>\",\n        \"Description\": \"<string>\",\n        \"Genre\": \"<integer>\",\n        \"SubGenre\": \"<integer>\",\n        \"Published\": \"<string>\",\n        \"LastUpdatedBy\": \"<string>\",\n        \"LastUpdated\": \"<string>\"\n      },\n      \"Source List\": {\n        \"Sourceid\": \"<integer>\",\n        \"SourceName\": \"<string>\",\n        \"ExternalLink\": \"<string>\",\n        \"Genre\": \"<integer>\"\n      }\n    },\n    {\n      \"GenreID\": \"<integer>\",\n      \"Name\": \"<string>\",\n      \"Product List\": {\n        \"ID\": \"<integer>\",\n        \"Name\": \"<string>\",\n        \"Author\": \"<string>\",\n        \"Description\": \"<string>\",\n        \"Genre\": \"<integer>\",\n        \"SubGenre\": \"<integer>\",\n        \"Published\": \"<string>\",\n        \"LastUpdatedBy\": \"<string>\",\n        \"LastUpdated\": \"<string>\"\n      },\n      \"Source List\": {\n        \"Sourceid\": \"<integer>\",\n        \"SourceName\": \"<string>\",\n        \"ExternalLink\": \"<string>\",\n        \"Genre\": \"<integer>\"\n      }\n    }\n  ],\n  \"PageInfo\": {\n    \"pageSize\": \"<integer>\",\n    \"totalRows\": \"<integer>\",\n    \"isFirstPage\": \"<boolean>\",\n    \"isLastPage\": \"<boolean>\",\n    \"page\": \"<number>\"\n  }\n}"
										}
									]
								},
								{
									"name": "Genre create",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"GenreID\": \"<integer>\",\n  \"Name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/inft3050/Genre",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"inft3050",
												"Genre"
											]
										},
										"description": "Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "xc-auth",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"GenreID\": \"<integer>\",\n  \"Name\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Genre",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Genre"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"GenreID\": \"<integer>\",\n  \"Name\": \"<string>\",\n  \"Product List\": {\n    \"ID\": \"<integer>\",\n    \"Name\": \"<string>\",\n    \"Author\": \"<string>\",\n    \"Description\": \"<string>\",\n    \"Genre\": \"<integer>\",\n    \"SubGenre\": \"<integer>\",\n    \"Published\": \"<string>\",\n    \"LastUpdatedBy\": \"<string>\",\n    \"LastUpdated\": \"<string>\"\n  },\n  \"Source List\": {\n    \"Sourceid\": \"<integer>\",\n    \"SourceName\": \"<string>\",\n    \"ExternalLink\": \"<string>\",\n    \"Genre\": \"<integer>\"\n  }\n}"
										}
									]
								}
							]
						},
						{
							"name": "MovieGenre",
							"item": [
								{
									"name": "{rowId}",
									"item": [
										{
											"name": "MovieGenre read",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/MovieGenre/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"MovieGenre",
														":rowId"
													],
													"query": [
														{
															"key": "fields",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Read a row data by using the **primary key** column value."
											},
											"response": [
												{
													"name": "Created",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/MovieGenre/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"MovieGenre",
																":rowId"
															],
															"query": [
																{
																	"key": "fields",
																	"value": "<string>",
																	"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"SubGenreID\": \"<integer>\",\n  \"Name\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "MovieGenre update",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/MovieGenre/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"MovieGenre",
														":rowId"
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/MovieGenre/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"MovieGenre",
																":rowId"
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"SubGenreID\": \"<integer>\",\n  \"Name\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "MovieGenre delete",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/MovieGenre/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"MovieGenre",
														":rowId"
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Delete a row by using the **primary key** column value."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/MovieGenre/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"MovieGenre",
																":rowId"
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "count",
									"item": [
										{
											"name": "MovieGenre count",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/MovieGenre/count",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"MovieGenre",
														"count"
													],
													"query": [
														{
															"key": "where",
															"value": "<string>",
															"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
															"disabled": true
														}
													]
												},
												"description": "Get rows count of a table by applying optional filters."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/MovieGenre/count",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"MovieGenre",
																"count"
															],
															"query": [
																{
																	"key": "where",
																	"value": "<string>",
																	"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
																	"disabled": true
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										}
									]
								},
								{
									"name": "MovieGenre list",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/inft3050/MovieGenre",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"inft3050",
												"MovieGenre"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>",
													"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "<string>",
													"description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`",
													"disabled": true
												},
												{
													"key": "where",
													"value": "<string>",
													"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "<number>",
													"description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
													"disabled": true
												},
												{
													"key": "shuffle",
													"value": "<number>",
													"description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "<number>",
													"description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
													"disabled": true
												}
											]
										},
										"description": "List of all rows from MovieGenre table and response data fields can be filtered based on query params."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "xc-auth",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/MovieGenre",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"MovieGenre"
													],
													"query": [
														{
															"key": "fields",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
															"disabled": true
														},
														{
															"key": "sort",
															"value": "<string>",
															"description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`",
															"disabled": true
														},
														{
															"key": "where",
															"value": "<string>",
															"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "<number>",
															"description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
															"disabled": true
														},
														{
															"key": "shuffle",
															"value": "<number>",
															"description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
															"disabled": true
														},
														{
															"key": "offset",
															"value": "<number>",
															"description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
															"disabled": true
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"list\": [\n    {\n      \"SubGenreID\": \"<integer>\",\n      \"Name\": \"<string>\"\n    },\n    {\n      \"SubGenreID\": \"<integer>\",\n      \"Name\": \"<string>\"\n    }\n  ],\n  \"PageInfo\": {\n    \"pageSize\": \"<integer>\",\n    \"totalRows\": \"<integer>\",\n    \"isFirstPage\": \"<boolean>\",\n    \"isLastPage\": \"<boolean>\",\n    \"page\": \"<number>\"\n  }\n}"
										}
									]
								},
								{
									"name": "MovieGenre create",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"SubGenreID\": \"<integer>\",\n  \"Name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/inft3050/MovieGenre",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"inft3050",
												"MovieGenre"
											]
										},
										"description": "Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "xc-auth",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"SubGenreID\": \"<integer>\",\n  \"Name\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/MovieGenre",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"MovieGenre"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"SubGenreID\": \"<integer>\",\n  \"Name\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Orders",
							"item": [
								{
									"name": "{rowId}",
									"item": [
										{
											"name": "Orders read",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Orders/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Orders",
														":rowId"
													],
													"query": [
														{
															"key": "fields",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Read a row data by using the **primary key** column value."
											},
											"response": [
												{
													"name": "Created",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/Orders/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"Orders",
																":rowId"
															],
															"query": [
																{
																	"key": "fields",
																	"value": "<string>",
																	"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"OrderID\": \"<integer>\",\n  \"Customer\": \"<integer>\",\n  \"StreetAddress\": \"<string>\",\n  \"PostCode\": \"<integer>\",\n  \"Suburb\": \"<string>\",\n  \"State\": \"<string>\",\n  \"ProductsInOrders List\": {\n    \"OrderId\": \"<integer>\",\n    \"ProduktId\": \"<integer>\",\n    \"Quantity\": \"<integer>\"\n  },\n  \"TO\": {\n    \"CustomerID\": \"<integer>\",\n    \"PatronId\": \"<integer>\",\n    \"Email\": \"<string>\",\n    \"PhoneNumber\": \"<string>\",\n    \"StreetAddress\": \"<string>\",\n    \"PostCode\": \"<integer>\",\n    \"Suburb\": \"<string>\",\n    \"State\": \"<string>\",\n    \"CardNumber\": \"<string>\",\n    \"CardOwner\": \"<string>\",\n    \"Expiry\": \"<string>\",\n    \"CVV\": \"<integer>\"\n  },\n  \"Stocktake List\": {\n    \"ItemId\": \"<integer>\",\n    \"SourceId\": \"<integer>\",\n    \"ProductId\": \"<integer>\",\n    \"Quantity\": \"<integer>\",\n    \"Price\": \"<float>\"\n  }\n}"
												}
											]
										},
										{
											"name": "Orders update",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Orders/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Orders",
														":rowId"
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/Orders/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"Orders",
																":rowId"
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"OrderID\": \"<integer>\",\n  \"Customer\": \"<integer>\",\n  \"StreetAddress\": \"<string>\",\n  \"PostCode\": \"<integer>\",\n  \"Suburb\": \"<string>\",\n  \"State\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "Orders delete",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Orders/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Orders",
														":rowId"
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Delete a row by using the **primary key** column value."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/Orders/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"Orders",
																":rowId"
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "count",
									"item": [
										{
											"name": "Orders count",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Orders/count",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Orders",
														"count"
													],
													"query": [
														{
															"key": "where",
															"value": "<string>",
															"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
															"disabled": true
														}
													]
												},
												"description": "Get rows count of a table by applying optional filters."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/Orders/count",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"Orders",
																"count"
															],
															"query": [
																{
																	"key": "where",
																	"value": "<string>",
																	"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
																	"disabled": true
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										}
									]
								},
								{
									"name": "Orders list",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/inft3050/Orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"inft3050",
												"Orders"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>",
													"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "<string>",
													"description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`",
													"disabled": true
												},
												{
													"key": "where",
													"value": "<string>",
													"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "<number>",
													"description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
													"disabled": true
												},
												{
													"key": "shuffle",
													"value": "<number>",
													"description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "<number>",
													"description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
													"disabled": true
												},
												{
													"key": "nested[ProductsInOrders List][where]",
													"value": "<string>",
													"description": "This can be used for filtering rows in nested column `ProductsInOrders List`, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `nested[ProductsInOrders List][where]=(field1,eq,value)`",
													"disabled": true
												},
												{
													"key": "nested[ProductsInOrders List][offset]",
													"value": "<number>",
													"description": "The `offset` parameter used for pagination  of nested `ProductsInOrders List` rows, the value helps to select collection from a certain index.",
													"disabled": true
												},
												{
													"key": "nested[ProductsInOrders List][limit]",
													"value": "<number>",
													"description": "The `limit` parameter used for pagination of nested `ProductsInOrders List` rows, the response collection size depends on limit value and default value is `25`.",
													"disabled": true
												},
												{
													"key": "nested[ProductsInOrders List][fields]",
													"value": "<string>",
													"description": "Array of field names or comma separated filed names to include in the in nested column `ProductsInOrders List` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[ProductsInOrders List][fields]=field1,field2`",
													"disabled": true
												},
												{
													"key": "nested[ProductsInOrders List][sort]",
													"value": "<string>",
													"description": "Comma separated field names to sort rows in nested column `ProductsInOrders List` rows, it will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `nested[ProductsInOrders List][sort]=field1,-field2`",
													"disabled": true
												},
												{
													"key": "nested[TO][fields]",
													"value": "<string>",
													"description": "Array of field names or comma separated filed names to include in the in nested column `TO` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[TO][fields]=field1,field2`",
													"disabled": true
												},
												{
													"key": "nested[Stocktake List][where]",
													"value": "<string>",
													"description": "This can be used for filtering rows in nested column `Stocktake List`, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `nested[Stocktake List][where]=(field1,eq,value)`",
													"disabled": true
												},
												{
													"key": "nested[Stocktake List][offset]",
													"value": "<number>",
													"description": "The `offset` parameter used for pagination  of nested `Stocktake List` rows, the value helps to select collection from a certain index.",
													"disabled": true
												},
												{
													"key": "nested[Stocktake List][limit]",
													"value": "<number>",
													"description": "The `limit` parameter used for pagination of nested `Stocktake List` rows, the response collection size depends on limit value and default value is `25`.",
													"disabled": true
												},
												{
													"key": "nested[Stocktake List][fields]",
													"value": "<string>",
													"description": "Array of field names or comma separated filed names to include in the in nested column `Stocktake List` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Stocktake List][fields]=field1,field2`",
													"disabled": true
												},
												{
													"key": "nested[Stocktake List][sort]",
													"value": "<string>",
													"description": "Comma separated field names to sort rows in nested column `Stocktake List` rows, it will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `nested[Stocktake List][sort]=field1,-field2`",
													"disabled": true
												}
											]
										},
										"description": "List of all rows from Orders table and response data fields can be filtered based on query params."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "xc-auth",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Orders",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Orders"
													],
													"query": [
														{
															"key": "fields",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
															"disabled": true
														},
														{
															"key": "sort",
															"value": "<string>",
															"description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`",
															"disabled": true
														},
														{
															"key": "where",
															"value": "<string>",
															"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "<number>",
															"description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
															"disabled": true
														},
														{
															"key": "shuffle",
															"value": "<number>",
															"description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
															"disabled": true
														},
														{
															"key": "offset",
															"value": "<number>",
															"description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
															"disabled": true
														},
														{
															"key": "nested[ProductsInOrders List][where]",
															"value": "<string>",
															"description": "This can be used for filtering rows in nested column `ProductsInOrders List`, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `nested[ProductsInOrders List][where]=(field1,eq,value)`",
															"disabled": true
														},
														{
															"key": "nested[ProductsInOrders List][offset]",
															"value": "<number>",
															"description": "The `offset` parameter used for pagination  of nested `ProductsInOrders List` rows, the value helps to select collection from a certain index.",
															"disabled": true
														},
														{
															"key": "nested[ProductsInOrders List][limit]",
															"value": "<number>",
															"description": "The `limit` parameter used for pagination of nested `ProductsInOrders List` rows, the response collection size depends on limit value and default value is `25`.",
															"disabled": true
														},
														{
															"key": "nested[ProductsInOrders List][fields]",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the in nested column `ProductsInOrders List` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[ProductsInOrders List][fields]=field1,field2`",
															"disabled": true
														},
														{
															"key": "nested[ProductsInOrders List][sort]",
															"value": "<string>",
															"description": "Comma separated field names to sort rows in nested column `ProductsInOrders List` rows, it will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `nested[ProductsInOrders List][sort]=field1,-field2`",
															"disabled": true
														},
														{
															"key": "nested[TO][fields]",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the in nested column `TO` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[TO][fields]=field1,field2`",
															"disabled": true
														},
														{
															"key": "nested[Stocktake List][where]",
															"value": "<string>",
															"description": "This can be used for filtering rows in nested column `Stocktake List`, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `nested[Stocktake List][where]=(field1,eq,value)`",
															"disabled": true
														},
														{
															"key": "nested[Stocktake List][offset]",
															"value": "<number>",
															"description": "The `offset` parameter used for pagination  of nested `Stocktake List` rows, the value helps to select collection from a certain index.",
															"disabled": true
														},
														{
															"key": "nested[Stocktake List][limit]",
															"value": "<number>",
															"description": "The `limit` parameter used for pagination of nested `Stocktake List` rows, the response collection size depends on limit value and default value is `25`.",
															"disabled": true
														},
														{
															"key": "nested[Stocktake List][fields]",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the in nested column `Stocktake List` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Stocktake List][fields]=field1,field2`",
															"disabled": true
														},
														{
															"key": "nested[Stocktake List][sort]",
															"value": "<string>",
															"description": "Comma separated field names to sort rows in nested column `Stocktake List` rows, it will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `nested[Stocktake List][sort]=field1,-field2`",
															"disabled": true
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"list\": [\n    {\n      \"OrderID\": \"<integer>\",\n      \"Customer\": \"<integer>\",\n      \"StreetAddress\": \"<string>\",\n      \"PostCode\": \"<integer>\",\n      \"Suburb\": \"<string>\",\n      \"State\": \"<string>\",\n      \"ProductsInOrders List\": {\n        \"OrderId\": \"<integer>\",\n        \"ProduktId\": \"<integer>\",\n        \"Quantity\": \"<integer>\"\n      },\n      \"TO\": {\n        \"CustomerID\": \"<integer>\",\n        \"PatronId\": \"<integer>\",\n        \"Email\": \"<string>\",\n        \"PhoneNumber\": \"<string>\",\n        \"StreetAddress\": \"<string>\",\n        \"PostCode\": \"<integer>\",\n        \"Suburb\": \"<string>\",\n        \"State\": \"<string>\",\n        \"CardNumber\": \"<string>\",\n        \"CardOwner\": \"<string>\",\n        \"Expiry\": \"<string>\",\n        \"CVV\": \"<integer>\"\n      },\n      \"Stocktake List\": {\n        \"ItemId\": \"<integer>\",\n        \"SourceId\": \"<integer>\",\n        \"ProductId\": \"<integer>\",\n        \"Quantity\": \"<integer>\",\n        \"Price\": \"<float>\"\n      }\n    },\n    {\n      \"OrderID\": \"<integer>\",\n      \"Customer\": \"<integer>\",\n      \"StreetAddress\": \"<string>\",\n      \"PostCode\": \"<integer>\",\n      \"Suburb\": \"<string>\",\n      \"State\": \"<string>\",\n      \"ProductsInOrders List\": {\n        \"OrderId\": \"<integer>\",\n        \"ProduktId\": \"<integer>\",\n        \"Quantity\": \"<integer>\"\n      },\n      \"TO\": {\n        \"CustomerID\": \"<integer>\",\n        \"PatronId\": \"<integer>\",\n        \"Email\": \"<string>\",\n        \"PhoneNumber\": \"<string>\",\n        \"StreetAddress\": \"<string>\",\n        \"PostCode\": \"<integer>\",\n        \"Suburb\": \"<string>\",\n        \"State\": \"<string>\",\n        \"CardNumber\": \"<string>\",\n        \"CardOwner\": \"<string>\",\n        \"Expiry\": \"<string>\",\n        \"CVV\": \"<integer>\"\n      },\n      \"Stocktake List\": {\n        \"ItemId\": \"<integer>\",\n        \"SourceId\": \"<integer>\",\n        \"ProductId\": \"<integer>\",\n        \"Quantity\": \"<integer>\",\n        \"Price\": \"<float>\"\n      }\n    }\n  ],\n  \"PageInfo\": {\n    \"pageSize\": \"<integer>\",\n    \"totalRows\": \"<integer>\",\n    \"isFirstPage\": \"<boolean>\",\n    \"isLastPage\": \"<boolean>\",\n    \"page\": \"<number>\"\n  }\n}"
										}
									]
								},
								{
									"name": "Orders create",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"OrderID\": \"<integer>\",\n  \"Customer\": \"<integer>\",\n  \"StreetAddress\": \"<string>\",\n  \"PostCode\": \"<integer>\",\n  \"Suburb\": \"<string>\",\n  \"State\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/inft3050/Orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"inft3050",
												"Orders"
											]
										},
										"description": "Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "xc-auth",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"OrderID\": \"<integer>\",\n  \"Customer\": \"<integer>\",\n  \"StreetAddress\": \"<string>\",\n  \"PostCode\": \"<integer>\",\n  \"Suburb\": \"<string>\",\n  \"State\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Orders",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Orders"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"OrderID\": \"<integer>\",\n  \"Customer\": \"<integer>\",\n  \"StreetAddress\": \"<string>\",\n  \"PostCode\": \"<integer>\",\n  \"Suburb\": \"<string>\",\n  \"State\": \"<string>\",\n  \"ProductsInOrders List\": {\n    \"OrderId\": \"<integer>\",\n    \"ProduktId\": \"<integer>\",\n    \"Quantity\": \"<integer>\"\n  },\n  \"TO\": {\n    \"CustomerID\": \"<integer>\",\n    \"PatronId\": \"<integer>\",\n    \"Email\": \"<string>\",\n    \"PhoneNumber\": \"<string>\",\n    \"StreetAddress\": \"<string>\",\n    \"PostCode\": \"<integer>\",\n    \"Suburb\": \"<string>\",\n    \"State\": \"<string>\",\n    \"CardNumber\": \"<string>\",\n    \"CardOwner\": \"<string>\",\n    \"Expiry\": \"<string>\",\n    \"CVV\": \"<integer>\"\n  },\n  \"Stocktake List\": {\n    \"ItemId\": \"<integer>\",\n    \"SourceId\": \"<integer>\",\n    \"ProductId\": \"<integer>\",\n    \"Quantity\": \"<integer>\",\n    \"Price\": \"<float>\"\n  }\n}"
										}
									]
								}
							]
						},
						{
							"name": "Patrons",
							"item": [
								{
									"name": "{rowId}",
									"item": [
										{
											"name": "Patrons read",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Patrons/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Patrons",
														":rowId"
													],
													"query": [
														{
															"key": "fields",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Read a row data by using the **primary key** column value."
											},
											"response": [
												{
													"name": "Created",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/Patrons/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"Patrons",
																":rowId"
															],
															"query": [
																{
																	"key": "fields",
																	"value": "<string>",
																	"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"UserID\": \"<integer>\",\n  \"Email\": \"<string>\",\n  \"Name\": \"<string>\",\n  \"Salt\": \"<string>\",\n  \"HashPW\": \"<string>\",\n  \"TO List\": {\n    \"CustomerID\": \"<integer>\",\n    \"PatronId\": \"<integer>\",\n    \"Email\": \"<string>\",\n    \"PhoneNumber\": \"<string>\",\n    \"StreetAddress\": \"<string>\",\n    \"PostCode\": \"<integer>\",\n    \"Suburb\": \"<string>\",\n    \"State\": \"<string>\",\n    \"CardNumber\": \"<string>\",\n    \"CardOwner\": \"<string>\",\n    \"Expiry\": \"<string>\",\n    \"CVV\": \"<integer>\"\n  }\n}"
												}
											]
										},
										{
											"name": "Patrons update",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Patrons/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Patrons",
														":rowId"
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/Patrons/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"Patrons",
																":rowId"
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"UserID\": \"<integer>\",\n  \"Email\": \"<string>\",\n  \"Name\": \"<string>\",\n  \"Salt\": \"<string>\",\n  \"HashPW\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "Patrons delete",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Patrons/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Patrons",
														":rowId"
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Delete a row by using the **primary key** column value."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/Patrons/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"Patrons",
																":rowId"
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "count",
									"item": [
										{
											"name": "Patrons count",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Patrons/count",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Patrons",
														"count"
													],
													"query": [
														{
															"key": "where",
															"value": "<string>",
															"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
															"disabled": true
														}
													]
												},
												"description": "Get rows count of a table by applying optional filters."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/Patrons/count",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"Patrons",
																"count"
															],
															"query": [
																{
																	"key": "where",
																	"value": "<string>",
																	"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
																	"disabled": true
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										}
									]
								},
								{
									"name": "Patrons list",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/inft3050/Patrons",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"inft3050",
												"Patrons"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>",
													"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "<string>",
													"description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`",
													"disabled": true
												},
												{
													"key": "where",
													"value": "<string>",
													"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "<number>",
													"description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
													"disabled": true
												},
												{
													"key": "shuffle",
													"value": "<number>",
													"description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "<number>",
													"description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
													"disabled": true
												},
												{
													"key": "nested[TO List][where]",
													"value": "<string>",
													"description": "This can be used for filtering rows in nested column `TO List`, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `nested[TO List][where]=(field1,eq,value)`",
													"disabled": true
												},
												{
													"key": "nested[TO List][offset]",
													"value": "<number>",
													"description": "The `offset` parameter used for pagination  of nested `TO List` rows, the value helps to select collection from a certain index.",
													"disabled": true
												},
												{
													"key": "nested[TO List][limit]",
													"value": "<number>",
													"description": "The `limit` parameter used for pagination of nested `TO List` rows, the response collection size depends on limit value and default value is `25`.",
													"disabled": true
												},
												{
													"key": "nested[TO List][fields]",
													"value": "<string>",
													"description": "Array of field names or comma separated filed names to include in the in nested column `TO List` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[TO List][fields]=field1,field2`",
													"disabled": true
												},
												{
													"key": "nested[TO List][sort]",
													"value": "<string>",
													"description": "Comma separated field names to sort rows in nested column `TO List` rows, it will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `nested[TO List][sort]=field1,-field2`",
													"disabled": true
												}
											]
										},
										"description": "List of all rows from Patrons table and response data fields can be filtered based on query params."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "xc-auth",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Patrons",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Patrons"
													],
													"query": [
														{
															"key": "fields",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
															"disabled": true
														},
														{
															"key": "sort",
															"value": "<string>",
															"description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`",
															"disabled": true
														},
														{
															"key": "where",
															"value": "<string>",
															"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "<number>",
															"description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
															"disabled": true
														},
														{
															"key": "shuffle",
															"value": "<number>",
															"description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
															"disabled": true
														},
														{
															"key": "offset",
															"value": "<number>",
															"description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
															"disabled": true
														},
														{
															"key": "nested[TO List][where]",
															"value": "<string>",
															"description": "This can be used for filtering rows in nested column `TO List`, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `nested[TO List][where]=(field1,eq,value)`",
															"disabled": true
														},
														{
															"key": "nested[TO List][offset]",
															"value": "<number>",
															"description": "The `offset` parameter used for pagination  of nested `TO List` rows, the value helps to select collection from a certain index.",
															"disabled": true
														},
														{
															"key": "nested[TO List][limit]",
															"value": "<number>",
															"description": "The `limit` parameter used for pagination of nested `TO List` rows, the response collection size depends on limit value and default value is `25`.",
															"disabled": true
														},
														{
															"key": "nested[TO List][fields]",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the in nested column `TO List` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[TO List][fields]=field1,field2`",
															"disabled": true
														},
														{
															"key": "nested[TO List][sort]",
															"value": "<string>",
															"description": "Comma separated field names to sort rows in nested column `TO List` rows, it will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `nested[TO List][sort]=field1,-field2`",
															"disabled": true
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"list\": [\n    {\n      \"UserID\": \"<integer>\",\n      \"Email\": \"<string>\",\n      \"Name\": \"<string>\",\n      \"Salt\": \"<string>\",\n      \"HashPW\": \"<string>\",\n      \"TO List\": {\n        \"CustomerID\": \"<integer>\",\n        \"PatronId\": \"<integer>\",\n        \"Email\": \"<string>\",\n        \"PhoneNumber\": \"<string>\",\n        \"StreetAddress\": \"<string>\",\n        \"PostCode\": \"<integer>\",\n        \"Suburb\": \"<string>\",\n        \"State\": \"<string>\",\n        \"CardNumber\": \"<string>\",\n        \"CardOwner\": \"<string>\",\n        \"Expiry\": \"<string>\",\n        \"CVV\": \"<integer>\"\n      }\n    },\n    {\n      \"UserID\": \"<integer>\",\n      \"Email\": \"<string>\",\n      \"Name\": \"<string>\",\n      \"Salt\": \"<string>\",\n      \"HashPW\": \"<string>\",\n      \"TO List\": {\n        \"CustomerID\": \"<integer>\",\n        \"PatronId\": \"<integer>\",\n        \"Email\": \"<string>\",\n        \"PhoneNumber\": \"<string>\",\n        \"StreetAddress\": \"<string>\",\n        \"PostCode\": \"<integer>\",\n        \"Suburb\": \"<string>\",\n        \"State\": \"<string>\",\n        \"CardNumber\": \"<string>\",\n        \"CardOwner\": \"<string>\",\n        \"Expiry\": \"<string>\",\n        \"CVV\": \"<integer>\"\n      }\n    }\n  ],\n  \"PageInfo\": {\n    \"pageSize\": \"<integer>\",\n    \"totalRows\": \"<integer>\",\n    \"isFirstPage\": \"<boolean>\",\n    \"isLastPage\": \"<boolean>\",\n    \"page\": \"<number>\"\n  }\n}"
										}
									]
								},
								{
									"name": "Patrons create",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"UserID\": \"<integer>\",\n  \"Email\": \"<string>\",\n  \"Name\": \"<string>\",\n  \"Salt\": \"<string>\",\n  \"HashPW\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/inft3050/Patrons",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"inft3050",
												"Patrons"
											]
										},
										"description": "Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "xc-auth",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"UserID\": \"<integer>\",\n  \"Email\": \"<string>\",\n  \"Name\": \"<string>\",\n  \"Salt\": \"<string>\",\n  \"HashPW\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Patrons",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Patrons"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"UserID\": \"<integer>\",\n  \"Email\": \"<string>\",\n  \"Name\": \"<string>\",\n  \"Salt\": \"<string>\",\n  \"HashPW\": \"<string>\",\n  \"TO List\": {\n    \"CustomerID\": \"<integer>\",\n    \"PatronId\": \"<integer>\",\n    \"Email\": \"<string>\",\n    \"PhoneNumber\": \"<string>\",\n    \"StreetAddress\": \"<string>\",\n    \"PostCode\": \"<integer>\",\n    \"Suburb\": \"<string>\",\n    \"State\": \"<string>\",\n    \"CardNumber\": \"<string>\",\n    \"CardOwner\": \"<string>\",\n    \"Expiry\": \"<string>\",\n    \"CVV\": \"<integer>\"\n  }\n}"
										}
									]
								}
							]
						},
						{
							"name": "Product",
							"item": [
								{
									"name": "{rowId}",
									"item": [
										{
											"name": "Product read",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Product/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Product",
														":rowId"
													],
													"query": [
														{
															"key": "fields",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Read a row data by using the **primary key** column value."
											},
											"response": [
												{
													"name": "Created",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/Product/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"Product",
																":rowId"
															],
															"query": [
																{
																	"key": "fields",
																	"value": "<string>",
																	"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"ID\": \"<integer>\",\n  \"Name\": \"<string>\",\n  \"Author\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Genre\": {\n    \"GenreID\": \"<integer>\",\n    \"Name\": \"<string>\"\n  },\n  \"SubGenre\": \"<integer>\",\n  \"Published\": \"<string>\",\n  \"LastUpdatedBy\": \"<string>\",\n  \"LastUpdated\": \"<string>\",\n  \"Stocktake List\": {\n    \"ItemId\": \"<integer>\",\n    \"SourceId\": \"<integer>\",\n    \"ProductId\": \"<integer>\",\n    \"Quantity\": \"<integer>\",\n    \"Price\": \"<float>\"\n  },\n  \"User\": {\n    \"UserID\": \"<integer>\",\n    \"UserName\": \"<string>\",\n    \"Email\": \"<string>\",\n    \"Name\": \"<string>\",\n    \"IsAdmin\": \"<integer>\",\n    \"Salt\": \"<string>\",\n    \"HashPW\": \"<string>\"\n  }\n}"
												}
											]
										},
										{
											"name": "Product update",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Product/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Product",
														":rowId"
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/Product/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"Product",
																":rowId"
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"ID\": \"<integer>\",\n  \"Name\": \"<string>\",\n  \"Author\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Genre\": \"<integer>\",\n  \"SubGenre\": \"<integer>\",\n  \"Published\": \"<string>\",\n  \"LastUpdatedBy\": \"<string>\",\n  \"LastUpdated\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "Product delete",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Product/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Product",
														":rowId"
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Delete a row by using the **primary key** column value."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/Product/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"Product",
																":rowId"
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "count",
									"item": [
										{
											"name": "Product count",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Product/count",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Product",
														"count"
													],
													"query": [
														{
															"key": "where",
															"value": "<string>",
															"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
															"disabled": true
														}
													]
												},
												"description": "Get rows count of a table by applying optional filters."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/Product/count",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"Product",
																"count"
															],
															"query": [
																{
																	"key": "where",
																	"value": "<string>",
																	"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
																	"disabled": true
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										}
									]
								},
								{
									"name": "Product list",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/inft3050/Product",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"inft3050",
												"Product"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>",
													"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "<string>",
													"description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`",
													"disabled": true
												},
												{
													"key": "where",
													"value": "<string>",
													"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "<number>",
													"description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
													"disabled": true
												},
												{
													"key": "shuffle",
													"value": "<number>",
													"description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "<number>",
													"description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
													"disabled": true
												},
												{
													"key": "nested[Stocktake List][where]",
													"value": "<string>",
													"description": "This can be used for filtering rows in nested column `Stocktake List`, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `nested[Stocktake List][where]=(field1,eq,value)`",
													"disabled": true
												},
												{
													"key": "nested[Stocktake List][offset]",
													"value": "<number>",
													"description": "The `offset` parameter used for pagination  of nested `Stocktake List` rows, the value helps to select collection from a certain index.",
													"disabled": true
												},
												{
													"key": "nested[Stocktake List][limit]",
													"value": "<number>",
													"description": "The `limit` parameter used for pagination of nested `Stocktake List` rows, the response collection size depends on limit value and default value is `25`.",
													"disabled": true
												},
												{
													"key": "nested[Stocktake List][fields]",
													"value": "<string>",
													"description": "Array of field names or comma separated filed names to include in the in nested column `Stocktake List` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Stocktake List][fields]=field1,field2`",
													"disabled": true
												},
												{
													"key": "nested[Stocktake List][sort]",
													"value": "<string>",
													"description": "Comma separated field names to sort rows in nested column `Stocktake List` rows, it will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `nested[Stocktake List][sort]=field1,-field2`",
													"disabled": true
												},
												{
													"key": "nested[Genre][fields]",
													"value": "<string>",
													"description": "Array of field names or comma separated filed names to include in the in nested column `Genre` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Genre][fields]=field1,field2`",
													"disabled": true
												},
												{
													"key": "nested[User][fields]",
													"value": "<string>",
													"description": "Array of field names or comma separated filed names to include in the in nested column `User` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[User][fields]=field1,field2`",
													"disabled": true
												}
											]
										},
										"description": "List of all rows from Product table and response data fields can be filtered based on query params."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "xc-auth",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Product",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Product"
													],
													"query": [
														{
															"key": "fields",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
															"disabled": true
														},
														{
															"key": "sort",
															"value": "<string>",
															"description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`",
															"disabled": true
														},
														{
															"key": "where",
															"value": "<string>",
															"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "<number>",
															"description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
															"disabled": true
														},
														{
															"key": "shuffle",
															"value": "<number>",
															"description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
															"disabled": true
														},
														{
															"key": "offset",
															"value": "<number>",
															"description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
															"disabled": true
														},
														{
															"key": "nested[Stocktake List][where]",
															"value": "<string>",
															"description": "This can be used for filtering rows in nested column `Stocktake List`, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `nested[Stocktake List][where]=(field1,eq,value)`",
															"disabled": true
														},
														{
															"key": "nested[Stocktake List][offset]",
															"value": "<number>",
															"description": "The `offset` parameter used for pagination  of nested `Stocktake List` rows, the value helps to select collection from a certain index.",
															"disabled": true
														},
														{
															"key": "nested[Stocktake List][limit]",
															"value": "<number>",
															"description": "The `limit` parameter used for pagination of nested `Stocktake List` rows, the response collection size depends on limit value and default value is `25`.",
															"disabled": true
														},
														{
															"key": "nested[Stocktake List][fields]",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the in nested column `Stocktake List` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Stocktake List][fields]=field1,field2`",
															"disabled": true
														},
														{
															"key": "nested[Stocktake List][sort]",
															"value": "<string>",
															"description": "Comma separated field names to sort rows in nested column `Stocktake List` rows, it will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `nested[Stocktake List][sort]=field1,-field2`",
															"disabled": true
														},
														{
															"key": "nested[Genre][fields]",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the in nested column `Genre` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Genre][fields]=field1,field2`",
															"disabled": true
														},
														{
															"key": "nested[User][fields]",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the in nested column `User` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[User][fields]=field1,field2`",
															"disabled": true
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"list\": [\n    {\n      \"ID\": \"<integer>\",\n      \"Name\": \"<string>\",\n      \"Author\": \"<string>\",\n      \"Description\": \"<string>\",\n      \"Genre\": {\n        \"GenreID\": \"<integer>\",\n        \"Name\": \"<string>\"\n      },\n      \"SubGenre\": \"<integer>\",\n      \"Published\": \"<string>\",\n      \"LastUpdatedBy\": \"<string>\",\n      \"LastUpdated\": \"<string>\",\n      \"Stocktake List\": {\n        \"ItemId\": \"<integer>\",\n        \"SourceId\": \"<integer>\",\n        \"ProductId\": \"<integer>\",\n        \"Quantity\": \"<integer>\",\n        \"Price\": \"<float>\"\n      },\n      \"User\": {\n        \"UserID\": \"<integer>\",\n        \"UserName\": \"<string>\",\n        \"Email\": \"<string>\",\n        \"Name\": \"<string>\",\n        \"IsAdmin\": \"<integer>\",\n        \"Salt\": \"<string>\",\n        \"HashPW\": \"<string>\"\n      }\n    },\n    {\n      \"ID\": \"<integer>\",\n      \"Name\": \"<string>\",\n      \"Author\": \"<string>\",\n      \"Description\": \"<string>\",\n      \"Genre\": {\n        \"GenreID\": \"<integer>\",\n        \"Name\": \"<string>\"\n      },\n      \"SubGenre\": \"<integer>\",\n      \"Published\": \"<string>\",\n      \"LastUpdatedBy\": \"<string>\",\n      \"LastUpdated\": \"<string>\",\n      \"Stocktake List\": {\n        \"ItemId\": \"<integer>\",\n        \"SourceId\": \"<integer>\",\n        \"ProductId\": \"<integer>\",\n        \"Quantity\": \"<integer>\",\n        \"Price\": \"<float>\"\n      },\n      \"User\": {\n        \"UserID\": \"<integer>\",\n        \"UserName\": \"<string>\",\n        \"Email\": \"<string>\",\n        \"Name\": \"<string>\",\n        \"IsAdmin\": \"<integer>\",\n        \"Salt\": \"<string>\",\n        \"HashPW\": \"<string>\"\n      }\n    }\n  ],\n  \"PageInfo\": {\n    \"pageSize\": \"<integer>\",\n    \"totalRows\": \"<integer>\",\n    \"isFirstPage\": \"<boolean>\",\n    \"isLastPage\": \"<boolean>\",\n    \"page\": \"<number>\"\n  }\n}"
										}
									]
								},
								{
									"name": "Product create",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"ID\": \"<integer>\",\n  \"Name\": \"<string>\",\n  \"Author\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Genre\": \"<integer>\",\n  \"SubGenre\": \"<integer>\",\n  \"Published\": \"<string>\",\n  \"LastUpdatedBy\": \"<string>\",\n  \"LastUpdated\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/inft3050/Product",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"inft3050",
												"Product"
											]
										},
										"description": "Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "xc-auth",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"ID\": \"<integer>\",\n  \"Name\": \"<string>\",\n  \"Author\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Genre\": \"<integer>\",\n  \"SubGenre\": \"<integer>\",\n  \"Published\": \"<string>\",\n  \"LastUpdatedBy\": \"<string>\",\n  \"LastUpdated\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Product",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Product"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"ID\": \"<integer>\",\n  \"Name\": \"<string>\",\n  \"Author\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Genre\": {\n    \"GenreID\": \"<integer>\",\n    \"Name\": \"<string>\"\n  },\n  \"SubGenre\": \"<integer>\",\n  \"Published\": \"<string>\",\n  \"LastUpdatedBy\": \"<string>\",\n  \"LastUpdated\": \"<string>\",\n  \"Stocktake List\": {\n    \"ItemId\": \"<integer>\",\n    \"SourceId\": \"<integer>\",\n    \"ProductId\": \"<integer>\",\n    \"Quantity\": \"<integer>\",\n    \"Price\": \"<float>\"\n  },\n  \"User\": {\n    \"UserID\": \"<integer>\",\n    \"UserName\": \"<string>\",\n    \"Email\": \"<string>\",\n    \"Name\": \"<string>\",\n    \"IsAdmin\": \"<integer>\",\n    \"Salt\": \"<string>\",\n    \"HashPW\": \"<string>\"\n  }\n}"
										}
									]
								}
							]
						},
						{
							"name": "Source",
							"item": [
								{
									"name": "{rowId}",
									"item": [
										{
											"name": "Source read",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Source/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Source",
														":rowId"
													],
													"query": [
														{
															"key": "fields",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Read a row data by using the **primary key** column value."
											},
											"response": [
												{
													"name": "Created",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/Source/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"Source",
																":rowId"
															],
															"query": [
																{
																	"key": "fields",
																	"value": "<string>",
																	"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"Sourceid\": \"<integer>\",\n  \"SourceName\": \"<string>\",\n  \"ExternalLink\": \"<string>\",\n  \"Genre\": {\n    \"GenreID\": \"<integer>\",\n    \"Name\": \"<string>\"\n  },\n  \"Stocktake List\": {\n    \"ItemId\": \"<integer>\",\n    \"SourceId\": \"<integer>\",\n    \"ProductId\": \"<integer>\",\n    \"Quantity\": \"<integer>\",\n    \"Price\": \"<float>\"\n  }\n}"
												}
											]
										},
										{
											"name": "Source update",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Source/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Source",
														":rowId"
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/Source/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"Source",
																":rowId"
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"Sourceid\": \"<integer>\",\n  \"SourceName\": \"<string>\",\n  \"ExternalLink\": \"<string>\",\n  \"Genre\": \"<integer>\"\n}"
												}
											]
										},
										{
											"name": "Source delete",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Source/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Source",
														":rowId"
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Delete a row by using the **primary key** column value."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/Source/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"Source",
																":rowId"
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "count",
									"item": [
										{
											"name": "Source count",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Source/count",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Source",
														"count"
													],
													"query": [
														{
															"key": "where",
															"value": "<string>",
															"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
															"disabled": true
														}
													]
												},
												"description": "Get rows count of a table by applying optional filters."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/Source/count",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"Source",
																"count"
															],
															"query": [
																{
																	"key": "where",
																	"value": "<string>",
																	"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
																	"disabled": true
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										}
									]
								},
								{
									"name": "Source list",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/inft3050/Source",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"inft3050",
												"Source"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>",
													"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "<string>",
													"description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`",
													"disabled": true
												},
												{
													"key": "where",
													"value": "<string>",
													"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "<number>",
													"description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
													"disabled": true
												},
												{
													"key": "shuffle",
													"value": "<number>",
													"description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "<number>",
													"description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
													"disabled": true
												},
												{
													"key": "nested[Stocktake List][where]",
													"value": "<string>",
													"description": "This can be used for filtering rows in nested column `Stocktake List`, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `nested[Stocktake List][where]=(field1,eq,value)`",
													"disabled": true
												},
												{
													"key": "nested[Stocktake List][offset]",
													"value": "<number>",
													"description": "The `offset` parameter used for pagination  of nested `Stocktake List` rows, the value helps to select collection from a certain index.",
													"disabled": true
												},
												{
													"key": "nested[Stocktake List][limit]",
													"value": "<number>",
													"description": "The `limit` parameter used for pagination of nested `Stocktake List` rows, the response collection size depends on limit value and default value is `25`.",
													"disabled": true
												},
												{
													"key": "nested[Stocktake List][fields]",
													"value": "<string>",
													"description": "Array of field names or comma separated filed names to include in the in nested column `Stocktake List` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Stocktake List][fields]=field1,field2`",
													"disabled": true
												},
												{
													"key": "nested[Stocktake List][sort]",
													"value": "<string>",
													"description": "Comma separated field names to sort rows in nested column `Stocktake List` rows, it will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `nested[Stocktake List][sort]=field1,-field2`",
													"disabled": true
												},
												{
													"key": "nested[Genre][fields]",
													"value": "<string>",
													"description": "Array of field names or comma separated filed names to include in the in nested column `Genre` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Genre][fields]=field1,field2`",
													"disabled": true
												}
											]
										},
										"description": "List of all rows from Source table and response data fields can be filtered based on query params."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "xc-auth",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Source",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Source"
													],
													"query": [
														{
															"key": "fields",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
															"disabled": true
														},
														{
															"key": "sort",
															"value": "<string>",
															"description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`",
															"disabled": true
														},
														{
															"key": "where",
															"value": "<string>",
															"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "<number>",
															"description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
															"disabled": true
														},
														{
															"key": "shuffle",
															"value": "<number>",
															"description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
															"disabled": true
														},
														{
															"key": "offset",
															"value": "<number>",
															"description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
															"disabled": true
														},
														{
															"key": "nested[Stocktake List][where]",
															"value": "<string>",
															"description": "This can be used for filtering rows in nested column `Stocktake List`, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `nested[Stocktake List][where]=(field1,eq,value)`",
															"disabled": true
														},
														{
															"key": "nested[Stocktake List][offset]",
															"value": "<number>",
															"description": "The `offset` parameter used for pagination  of nested `Stocktake List` rows, the value helps to select collection from a certain index.",
															"disabled": true
														},
														{
															"key": "nested[Stocktake List][limit]",
															"value": "<number>",
															"description": "The `limit` parameter used for pagination of nested `Stocktake List` rows, the response collection size depends on limit value and default value is `25`.",
															"disabled": true
														},
														{
															"key": "nested[Stocktake List][fields]",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the in nested column `Stocktake List` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Stocktake List][fields]=field1,field2`",
															"disabled": true
														},
														{
															"key": "nested[Stocktake List][sort]",
															"value": "<string>",
															"description": "Comma separated field names to sort rows in nested column `Stocktake List` rows, it will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `nested[Stocktake List][sort]=field1,-field2`",
															"disabled": true
														},
														{
															"key": "nested[Genre][fields]",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the in nested column `Genre` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Genre][fields]=field1,field2`",
															"disabled": true
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"list\": [\n    {\n      \"Sourceid\": \"<integer>\",\n      \"SourceName\": \"<string>\",\n      \"ExternalLink\": \"<string>\",\n      \"Genre\": {\n        \"GenreID\": \"<integer>\",\n        \"Name\": \"<string>\"\n      },\n      \"Stocktake List\": {\n        \"ItemId\": \"<integer>\",\n        \"SourceId\": \"<integer>\",\n        \"ProductId\": \"<integer>\",\n        \"Quantity\": \"<integer>\",\n        \"Price\": \"<float>\"\n      }\n    },\n    {\n      \"Sourceid\": \"<integer>\",\n      \"SourceName\": \"<string>\",\n      \"ExternalLink\": \"<string>\",\n      \"Genre\": {\n        \"GenreID\": \"<integer>\",\n        \"Name\": \"<string>\"\n      },\n      \"Stocktake List\": {\n        \"ItemId\": \"<integer>\",\n        \"SourceId\": \"<integer>\",\n        \"ProductId\": \"<integer>\",\n        \"Quantity\": \"<integer>\",\n        \"Price\": \"<float>\"\n      }\n    }\n  ],\n  \"PageInfo\": {\n    \"pageSize\": \"<integer>\",\n    \"totalRows\": \"<integer>\",\n    \"isFirstPage\": \"<boolean>\",\n    \"isLastPage\": \"<boolean>\",\n    \"page\": \"<number>\"\n  }\n}"
										}
									]
								},
								{
									"name": "Source create",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Sourceid\": \"<integer>\",\n  \"SourceName\": \"<string>\",\n  \"ExternalLink\": \"<string>\",\n  \"Genre\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/inft3050/Source",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"inft3050",
												"Source"
											]
										},
										"description": "Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "xc-auth",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"Sourceid\": \"<integer>\",\n  \"SourceName\": \"<string>\",\n  \"ExternalLink\": \"<string>\",\n  \"Genre\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Source",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Source"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"Sourceid\": \"<integer>\",\n  \"SourceName\": \"<string>\",\n  \"ExternalLink\": \"<string>\",\n  \"Genre\": {\n    \"GenreID\": \"<integer>\",\n    \"Name\": \"<string>\"\n  },\n  \"Stocktake List\": {\n    \"ItemId\": \"<integer>\",\n    \"SourceId\": \"<integer>\",\n    \"ProductId\": \"<integer>\",\n    \"Quantity\": \"<integer>\",\n    \"Price\": \"<float>\"\n  }\n}"
										}
									]
								}
							]
						},
						{
							"name": "Stocktake",
							"item": [
								{
									"name": "{rowId}",
									"item": [
										{
											"name": "Stocktake read",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Stocktake/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Stocktake",
														":rowId"
													],
													"query": [
														{
															"key": "fields",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Read a row data by using the **primary key** column value."
											},
											"response": [
												{
													"name": "Created",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/Stocktake/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"Stocktake",
																":rowId"
															],
															"query": [
																{
																	"key": "fields",
																	"value": "<string>",
																	"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"ItemId\": \"<integer>\",\n  \"SourceId\": \"<integer>\",\n  \"ProductId\": \"<integer>\",\n  \"Quantity\": \"<integer>\",\n  \"Price\": \"<float>\",\n  \"ProductsInOrders List\": {\n    \"OrderId\": \"<integer>\",\n    \"ProduktId\": \"<integer>\",\n    \"Quantity\": \"<integer>\"\n  },\n  \"Product\": {\n    \"ID\": \"<integer>\",\n    \"Name\": \"<string>\",\n    \"Author\": \"<string>\",\n    \"Description\": \"<string>\",\n    \"Genre\": \"<integer>\",\n    \"SubGenre\": \"<integer>\",\n    \"Published\": \"<string>\",\n    \"LastUpdatedBy\": \"<string>\",\n    \"LastUpdated\": \"<string>\"\n  },\n  \"Source\": {\n    \"Sourceid\": \"<integer>\",\n    \"SourceName\": \"<string>\",\n    \"ExternalLink\": \"<string>\",\n    \"Genre\": \"<integer>\"\n  },\n  \"Orders List\": {\n    \"OrderID\": \"<integer>\",\n    \"Customer\": \"<integer>\",\n    \"StreetAddress\": \"<string>\",\n    \"PostCode\": \"<integer>\",\n    \"Suburb\": \"<string>\",\n    \"State\": \"<string>\"\n  }\n}"
												}
											]
										},
										{
											"name": "Stocktake update",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Stocktake/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Stocktake",
														":rowId"
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/Stocktake/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"Stocktake",
																":rowId"
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"ItemId\": \"<integer>\",\n  \"SourceId\": \"<integer>\",\n  \"ProductId\": \"<integer>\",\n  \"Quantity\": \"<integer>\",\n  \"Price\": \"<float>\"\n}"
												}
											]
										},
										{
											"name": "Stocktake delete",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Stocktake/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Stocktake",
														":rowId"
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Delete a row by using the **primary key** column value."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/Stocktake/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"Stocktake",
																":rowId"
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "count",
									"item": [
										{
											"name": "Stocktake count",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Stocktake/count",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Stocktake",
														"count"
													],
													"query": [
														{
															"key": "where",
															"value": "<string>",
															"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
															"disabled": true
														}
													]
												},
												"description": "Get rows count of a table by applying optional filters."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/Stocktake/count",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"Stocktake",
																"count"
															],
															"query": [
																{
																	"key": "where",
																	"value": "<string>",
																	"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
																	"disabled": true
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										}
									]
								},
								{
									"name": "Stocktake list",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/inft3050/Stocktake",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"inft3050",
												"Stocktake"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>",
													"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "<string>",
													"description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`",
													"disabled": true
												},
												{
													"key": "where",
													"value": "<string>",
													"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "<number>",
													"description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
													"disabled": true
												},
												{
													"key": "shuffle",
													"value": "<number>",
													"description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "<number>",
													"description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
													"disabled": true
												},
												{
													"key": "nested[ProductsInOrders List][where]",
													"value": "<string>",
													"description": "This can be used for filtering rows in nested column `ProductsInOrders List`, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `nested[ProductsInOrders List][where]=(field1,eq,value)`",
													"disabled": true
												},
												{
													"key": "nested[ProductsInOrders List][offset]",
													"value": "<number>",
													"description": "The `offset` parameter used for pagination  of nested `ProductsInOrders List` rows, the value helps to select collection from a certain index.",
													"disabled": true
												},
												{
													"key": "nested[ProductsInOrders List][limit]",
													"value": "<number>",
													"description": "The `limit` parameter used for pagination of nested `ProductsInOrders List` rows, the response collection size depends on limit value and default value is `25`.",
													"disabled": true
												},
												{
													"key": "nested[ProductsInOrders List][fields]",
													"value": "<string>",
													"description": "Array of field names or comma separated filed names to include in the in nested column `ProductsInOrders List` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[ProductsInOrders List][fields]=field1,field2`",
													"disabled": true
												},
												{
													"key": "nested[ProductsInOrders List][sort]",
													"value": "<string>",
													"description": "Comma separated field names to sort rows in nested column `ProductsInOrders List` rows, it will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `nested[ProductsInOrders List][sort]=field1,-field2`",
													"disabled": true
												},
												{
													"key": "nested[Product][fields]",
													"value": "<string>",
													"description": "Array of field names or comma separated filed names to include in the in nested column `Product` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Product][fields]=field1,field2`",
													"disabled": true
												},
												{
													"key": "nested[Source][fields]",
													"value": "<string>",
													"description": "Array of field names or comma separated filed names to include in the in nested column `Source` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Source][fields]=field1,field2`",
													"disabled": true
												},
												{
													"key": "nested[Orders List][where]",
													"value": "<string>",
													"description": "This can be used for filtering rows in nested column `Orders List`, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `nested[Orders List][where]=(field1,eq,value)`",
													"disabled": true
												},
												{
													"key": "nested[Orders List][offset]",
													"value": "<number>",
													"description": "The `offset` parameter used for pagination  of nested `Orders List` rows, the value helps to select collection from a certain index.",
													"disabled": true
												},
												{
													"key": "nested[Orders List][limit]",
													"value": "<number>",
													"description": "The `limit` parameter used for pagination of nested `Orders List` rows, the response collection size depends on limit value and default value is `25`.",
													"disabled": true
												},
												{
													"key": "nested[Orders List][fields]",
													"value": "<string>",
													"description": "Array of field names or comma separated filed names to include in the in nested column `Orders List` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Orders List][fields]=field1,field2`",
													"disabled": true
												},
												{
													"key": "nested[Orders List][sort]",
													"value": "<string>",
													"description": "Comma separated field names to sort rows in nested column `Orders List` rows, it will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `nested[Orders List][sort]=field1,-field2`",
													"disabled": true
												}
											]
										},
										"description": "List of all rows from Stocktake table and response data fields can be filtered based on query params."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "xc-auth",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Stocktake",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Stocktake"
													],
													"query": [
														{
															"key": "fields",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
															"disabled": true
														},
														{
															"key": "sort",
															"value": "<string>",
															"description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`",
															"disabled": true
														},
														{
															"key": "where",
															"value": "<string>",
															"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "<number>",
															"description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
															"disabled": true
														},
														{
															"key": "shuffle",
															"value": "<number>",
															"description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
															"disabled": true
														},
														{
															"key": "offset",
															"value": "<number>",
															"description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
															"disabled": true
														},
														{
															"key": "nested[ProductsInOrders List][where]",
															"value": "<string>",
															"description": "This can be used for filtering rows in nested column `ProductsInOrders List`, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `nested[ProductsInOrders List][where]=(field1,eq,value)`",
															"disabled": true
														},
														{
															"key": "nested[ProductsInOrders List][offset]",
															"value": "<number>",
															"description": "The `offset` parameter used for pagination  of nested `ProductsInOrders List` rows, the value helps to select collection from a certain index.",
															"disabled": true
														},
														{
															"key": "nested[ProductsInOrders List][limit]",
															"value": "<number>",
															"description": "The `limit` parameter used for pagination of nested `ProductsInOrders List` rows, the response collection size depends on limit value and default value is `25`.",
															"disabled": true
														},
														{
															"key": "nested[ProductsInOrders List][fields]",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the in nested column `ProductsInOrders List` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[ProductsInOrders List][fields]=field1,field2`",
															"disabled": true
														},
														{
															"key": "nested[ProductsInOrders List][sort]",
															"value": "<string>",
															"description": "Comma separated field names to sort rows in nested column `ProductsInOrders List` rows, it will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `nested[ProductsInOrders List][sort]=field1,-field2`",
															"disabled": true
														},
														{
															"key": "nested[Product][fields]",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the in nested column `Product` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Product][fields]=field1,field2`",
															"disabled": true
														},
														{
															"key": "nested[Source][fields]",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the in nested column `Source` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Source][fields]=field1,field2`",
															"disabled": true
														},
														{
															"key": "nested[Orders List][where]",
															"value": "<string>",
															"description": "This can be used for filtering rows in nested column `Orders List`, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `nested[Orders List][where]=(field1,eq,value)`",
															"disabled": true
														},
														{
															"key": "nested[Orders List][offset]",
															"value": "<number>",
															"description": "The `offset` parameter used for pagination  of nested `Orders List` rows, the value helps to select collection from a certain index.",
															"disabled": true
														},
														{
															"key": "nested[Orders List][limit]",
															"value": "<number>",
															"description": "The `limit` parameter used for pagination of nested `Orders List` rows, the response collection size depends on limit value and default value is `25`.",
															"disabled": true
														},
														{
															"key": "nested[Orders List][fields]",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the in nested column `Orders List` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Orders List][fields]=field1,field2`",
															"disabled": true
														},
														{
															"key": "nested[Orders List][sort]",
															"value": "<string>",
															"description": "Comma separated field names to sort rows in nested column `Orders List` rows, it will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `nested[Orders List][sort]=field1,-field2`",
															"disabled": true
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"list\": [\n    {\n      \"ItemId\": \"<integer>\",\n      \"SourceId\": \"<integer>\",\n      \"ProductId\": \"<integer>\",\n      \"Quantity\": \"<integer>\",\n      \"Price\": \"<float>\",\n      \"ProductsInOrders List\": {\n        \"OrderId\": \"<integer>\",\n        \"ProduktId\": \"<integer>\",\n        \"Quantity\": \"<integer>\"\n      },\n      \"Product\": {\n        \"ID\": \"<integer>\",\n        \"Name\": \"<string>\",\n        \"Author\": \"<string>\",\n        \"Description\": \"<string>\",\n        \"Genre\": \"<integer>\",\n        \"SubGenre\": \"<integer>\",\n        \"Published\": \"<string>\",\n        \"LastUpdatedBy\": \"<string>\",\n        \"LastUpdated\": \"<string>\"\n      },\n      \"Source\": {\n        \"Sourceid\": \"<integer>\",\n        \"SourceName\": \"<string>\",\n        \"ExternalLink\": \"<string>\",\n        \"Genre\": \"<integer>\"\n      },\n      \"Orders List\": {\n        \"OrderID\": \"<integer>\",\n        \"Customer\": \"<integer>\",\n        \"StreetAddress\": \"<string>\",\n        \"PostCode\": \"<integer>\",\n        \"Suburb\": \"<string>\",\n        \"State\": \"<string>\"\n      }\n    },\n    {\n      \"ItemId\": \"<integer>\",\n      \"SourceId\": \"<integer>\",\n      \"ProductId\": \"<integer>\",\n      \"Quantity\": \"<integer>\",\n      \"Price\": \"<float>\",\n      \"ProductsInOrders List\": {\n        \"OrderId\": \"<integer>\",\n        \"ProduktId\": \"<integer>\",\n        \"Quantity\": \"<integer>\"\n      },\n      \"Product\": {\n        \"ID\": \"<integer>\",\n        \"Name\": \"<string>\",\n        \"Author\": \"<string>\",\n        \"Description\": \"<string>\",\n        \"Genre\": \"<integer>\",\n        \"SubGenre\": \"<integer>\",\n        \"Published\": \"<string>\",\n        \"LastUpdatedBy\": \"<string>\",\n        \"LastUpdated\": \"<string>\"\n      },\n      \"Source\": {\n        \"Sourceid\": \"<integer>\",\n        \"SourceName\": \"<string>\",\n        \"ExternalLink\": \"<string>\",\n        \"Genre\": \"<integer>\"\n      },\n      \"Orders List\": {\n        \"OrderID\": \"<integer>\",\n        \"Customer\": \"<integer>\",\n        \"StreetAddress\": \"<string>\",\n        \"PostCode\": \"<integer>\",\n        \"Suburb\": \"<string>\",\n        \"State\": \"<string>\"\n      }\n    }\n  ],\n  \"PageInfo\": {\n    \"pageSize\": \"<integer>\",\n    \"totalRows\": \"<integer>\",\n    \"isFirstPage\": \"<boolean>\",\n    \"isLastPage\": \"<boolean>\",\n    \"page\": \"<number>\"\n  }\n}"
										}
									]
								},
								{
									"name": "Stocktake create",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"ItemId\": \"<integer>\",\n  \"SourceId\": \"<integer>\",\n  \"ProductId\": \"<integer>\",\n  \"Quantity\": \"<integer>\",\n  \"Price\": \"<float>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/inft3050/Stocktake",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"inft3050",
												"Stocktake"
											]
										},
										"description": "Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "xc-auth",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"ItemId\": \"<integer>\",\n  \"SourceId\": \"<integer>\",\n  \"ProductId\": \"<integer>\",\n  \"Quantity\": \"<integer>\",\n  \"Price\": \"<float>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/Stocktake",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"Stocktake"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"ItemId\": \"<integer>\",\n  \"SourceId\": \"<integer>\",\n  \"ProductId\": \"<integer>\",\n  \"Quantity\": \"<integer>\",\n  \"Price\": \"<float>\",\n  \"ProductsInOrders List\": {\n    \"OrderId\": \"<integer>\",\n    \"ProduktId\": \"<integer>\",\n    \"Quantity\": \"<integer>\"\n  },\n  \"Product\": {\n    \"ID\": \"<integer>\",\n    \"Name\": \"<string>\",\n    \"Author\": \"<string>\",\n    \"Description\": \"<string>\",\n    \"Genre\": \"<integer>\",\n    \"SubGenre\": \"<integer>\",\n    \"Published\": \"<string>\",\n    \"LastUpdatedBy\": \"<string>\",\n    \"LastUpdated\": \"<string>\"\n  },\n  \"Source\": {\n    \"Sourceid\": \"<integer>\",\n    \"SourceName\": \"<string>\",\n    \"ExternalLink\": \"<string>\",\n    \"Genre\": \"<integer>\"\n  },\n  \"Orders List\": {\n    \"OrderID\": \"<integer>\",\n    \"Customer\": \"<integer>\",\n    \"StreetAddress\": \"<string>\",\n    \"PostCode\": \"<integer>\",\n    \"Suburb\": \"<string>\",\n    \"State\": \"<string>\"\n  }\n}"
										}
									]
								}
							]
						},
						{
							"name": "TO",
							"item": [
								{
									"name": "{rowId}",
									"item": [
										{
											"name": "TO read",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/TO/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"TO",
														":rowId"
													],
													"query": [
														{
															"key": "fields",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Read a row data by using the **primary key** column value."
											},
											"response": [
												{
													"name": "Created",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/TO/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"TO",
																":rowId"
															],
															"query": [
																{
																	"key": "fields",
																	"value": "<string>",
																	"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"CustomerID\": \"<integer>\",\n  \"PatronId\": \"<integer>\",\n  \"Email\": \"<string>\",\n  \"PhoneNumber\": \"<string>\",\n  \"StreetAddress\": \"<string>\",\n  \"PostCode\": \"<integer>\",\n  \"Suburb\": \"<string>\",\n  \"State\": \"<string>\",\n  \"CardNumber\": \"<string>\",\n  \"CardOwner\": \"<string>\",\n  \"Expiry\": \"<string>\",\n  \"CVV\": \"<integer>\",\n  \"Orders List\": {\n    \"OrderID\": \"<integer>\",\n    \"Customer\": \"<integer>\",\n    \"StreetAddress\": \"<string>\",\n    \"PostCode\": \"<integer>\",\n    \"Suburb\": \"<string>\",\n    \"State\": \"<string>\"\n  },\n  \"Patrons\": {\n    \"UserID\": \"<integer>\",\n    \"Email\": \"<string>\",\n    \"Name\": \"<string>\",\n    \"Salt\": \"<string>\",\n    \"HashPW\": \"<string>\"\n  }\n}"
												}
											]
										},
										{
											"name": "TO update",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/TO/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"TO",
														":rowId"
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/TO/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"TO",
																":rowId"
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"CustomerID\": \"<integer>\",\n  \"PatronId\": \"<integer>\",\n  \"Email\": \"<string>\",\n  \"PhoneNumber\": \"<string>\",\n  \"StreetAddress\": \"<string>\",\n  \"PostCode\": \"<integer>\",\n  \"Suburb\": \"<string>\",\n  \"State\": \"<string>\",\n  \"CardNumber\": \"<string>\",\n  \"CardOwner\": \"<string>\",\n  \"Expiry\": \"<string>\",\n  \"CVV\": \"<integer>\"\n}"
												}
											]
										},
										{
											"name": "TO delete",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/TO/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"TO",
														":rowId"
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Delete a row by using the **primary key** column value."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/TO/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"TO",
																":rowId"
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "count",
									"item": [
										{
											"name": "TO count",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/TO/count",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"TO",
														"count"
													],
													"query": [
														{
															"key": "where",
															"value": "<string>",
															"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
															"disabled": true
														}
													]
												},
												"description": "Get rows count of a table by applying optional filters."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/TO/count",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"TO",
																"count"
															],
															"query": [
																{
																	"key": "where",
																	"value": "<string>",
																	"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
																	"disabled": true
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										}
									]
								},
								{
									"name": "TO list",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/inft3050/TO",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"inft3050",
												"TO"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>",
													"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "<string>",
													"description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`",
													"disabled": true
												},
												{
													"key": "where",
													"value": "<string>",
													"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "<number>",
													"description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
													"disabled": true
												},
												{
													"key": "shuffle",
													"value": "<number>",
													"description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "<number>",
													"description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
													"disabled": true
												},
												{
													"key": "nested[Orders List][where]",
													"value": "<string>",
													"description": "This can be used for filtering rows in nested column `Orders List`, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `nested[Orders List][where]=(field1,eq,value)`",
													"disabled": true
												},
												{
													"key": "nested[Orders List][offset]",
													"value": "<number>",
													"description": "The `offset` parameter used for pagination  of nested `Orders List` rows, the value helps to select collection from a certain index.",
													"disabled": true
												},
												{
													"key": "nested[Orders List][limit]",
													"value": "<number>",
													"description": "The `limit` parameter used for pagination of nested `Orders List` rows, the response collection size depends on limit value and default value is `25`.",
													"disabled": true
												},
												{
													"key": "nested[Orders List][fields]",
													"value": "<string>",
													"description": "Array of field names or comma separated filed names to include in the in nested column `Orders List` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Orders List][fields]=field1,field2`",
													"disabled": true
												},
												{
													"key": "nested[Orders List][sort]",
													"value": "<string>",
													"description": "Comma separated field names to sort rows in nested column `Orders List` rows, it will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `nested[Orders List][sort]=field1,-field2`",
													"disabled": true
												},
												{
													"key": "nested[Patrons][fields]",
													"value": "<string>",
													"description": "Array of field names or comma separated filed names to include in the in nested column `Patrons` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Patrons][fields]=field1,field2`",
													"disabled": true
												}
											]
										},
										"description": "List of all rows from TO table and response data fields can be filtered based on query params."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "xc-auth",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/TO",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"TO"
													],
													"query": [
														{
															"key": "fields",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
															"disabled": true
														},
														{
															"key": "sort",
															"value": "<string>",
															"description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`",
															"disabled": true
														},
														{
															"key": "where",
															"value": "<string>",
															"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "<number>",
															"description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
															"disabled": true
														},
														{
															"key": "shuffle",
															"value": "<number>",
															"description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
															"disabled": true
														},
														{
															"key": "offset",
															"value": "<number>",
															"description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
															"disabled": true
														},
														{
															"key": "nested[Orders List][where]",
															"value": "<string>",
															"description": "This can be used for filtering rows in nested column `Orders List`, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `nested[Orders List][where]=(field1,eq,value)`",
															"disabled": true
														},
														{
															"key": "nested[Orders List][offset]",
															"value": "<number>",
															"description": "The `offset` parameter used for pagination  of nested `Orders List` rows, the value helps to select collection from a certain index.",
															"disabled": true
														},
														{
															"key": "nested[Orders List][limit]",
															"value": "<number>",
															"description": "The `limit` parameter used for pagination of nested `Orders List` rows, the response collection size depends on limit value and default value is `25`.",
															"disabled": true
														},
														{
															"key": "nested[Orders List][fields]",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the in nested column `Orders List` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Orders List][fields]=field1,field2`",
															"disabled": true
														},
														{
															"key": "nested[Orders List][sort]",
															"value": "<string>",
															"description": "Comma separated field names to sort rows in nested column `Orders List` rows, it will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `nested[Orders List][sort]=field1,-field2`",
															"disabled": true
														},
														{
															"key": "nested[Patrons][fields]",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the in nested column `Patrons` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Patrons][fields]=field1,field2`",
															"disabled": true
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"list\": [\n    {\n      \"CustomerID\": \"<integer>\",\n      \"PatronId\": \"<integer>\",\n      \"Email\": \"<string>\",\n      \"PhoneNumber\": \"<string>\",\n      \"StreetAddress\": \"<string>\",\n      \"PostCode\": \"<integer>\",\n      \"Suburb\": \"<string>\",\n      \"State\": \"<string>\",\n      \"CardNumber\": \"<string>\",\n      \"CardOwner\": \"<string>\",\n      \"Expiry\": \"<string>\",\n      \"CVV\": \"<integer>\",\n      \"Orders List\": {\n        \"OrderID\": \"<integer>\",\n        \"Customer\": \"<integer>\",\n        \"StreetAddress\": \"<string>\",\n        \"PostCode\": \"<integer>\",\n        \"Suburb\": \"<string>\",\n        \"State\": \"<string>\"\n      },\n      \"Patrons\": {\n        \"UserID\": \"<integer>\",\n        \"Email\": \"<string>\",\n        \"Name\": \"<string>\",\n        \"Salt\": \"<string>\",\n        \"HashPW\": \"<string>\"\n      }\n    },\n    {\n      \"CustomerID\": \"<integer>\",\n      \"PatronId\": \"<integer>\",\n      \"Email\": \"<string>\",\n      \"PhoneNumber\": \"<string>\",\n      \"StreetAddress\": \"<string>\",\n      \"PostCode\": \"<integer>\",\n      \"Suburb\": \"<string>\",\n      \"State\": \"<string>\",\n      \"CardNumber\": \"<string>\",\n      \"CardOwner\": \"<string>\",\n      \"Expiry\": \"<string>\",\n      \"CVV\": \"<integer>\",\n      \"Orders List\": {\n        \"OrderID\": \"<integer>\",\n        \"Customer\": \"<integer>\",\n        \"StreetAddress\": \"<string>\",\n        \"PostCode\": \"<integer>\",\n        \"Suburb\": \"<string>\",\n        \"State\": \"<string>\"\n      },\n      \"Patrons\": {\n        \"UserID\": \"<integer>\",\n        \"Email\": \"<string>\",\n        \"Name\": \"<string>\",\n        \"Salt\": \"<string>\",\n        \"HashPW\": \"<string>\"\n      }\n    }\n  ],\n  \"PageInfo\": {\n    \"pageSize\": \"<integer>\",\n    \"totalRows\": \"<integer>\",\n    \"isFirstPage\": \"<boolean>\",\n    \"isLastPage\": \"<boolean>\",\n    \"page\": \"<number>\"\n  }\n}"
										}
									]
								},
								{
									"name": "TO create",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"CustomerID\": \"<integer>\",\n  \"PatronId\": \"<integer>\",\n  \"Email\": \"<string>\",\n  \"PhoneNumber\": \"<string>\",\n  \"StreetAddress\": \"<string>\",\n  \"PostCode\": \"<integer>\",\n  \"Suburb\": \"<string>\",\n  \"State\": \"<string>\",\n  \"CardNumber\": \"<string>\",\n  \"CardOwner\": \"<string>\",\n  \"Expiry\": \"<string>\",\n  \"CVV\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/inft3050/TO",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"inft3050",
												"TO"
											]
										},
										"description": "Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "xc-auth",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"CustomerID\": \"<integer>\",\n  \"PatronId\": \"<integer>\",\n  \"Email\": \"<string>\",\n  \"PhoneNumber\": \"<string>\",\n  \"StreetAddress\": \"<string>\",\n  \"PostCode\": \"<integer>\",\n  \"Suburb\": \"<string>\",\n  \"State\": \"<string>\",\n  \"CardNumber\": \"<string>\",\n  \"CardOwner\": \"<string>\",\n  \"Expiry\": \"<string>\",\n  \"CVV\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/TO",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"TO"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"CustomerID\": \"<integer>\",\n  \"PatronId\": \"<integer>\",\n  \"Email\": \"<string>\",\n  \"PhoneNumber\": \"<string>\",\n  \"StreetAddress\": \"<string>\",\n  \"PostCode\": \"<integer>\",\n  \"Suburb\": \"<string>\",\n  \"State\": \"<string>\",\n  \"CardNumber\": \"<string>\",\n  \"CardOwner\": \"<string>\",\n  \"Expiry\": \"<string>\",\n  \"CVV\": \"<integer>\",\n  \"Orders List\": {\n    \"OrderID\": \"<integer>\",\n    \"Customer\": \"<integer>\",\n    \"StreetAddress\": \"<string>\",\n    \"PostCode\": \"<integer>\",\n    \"Suburb\": \"<string>\",\n    \"State\": \"<string>\"\n  },\n  \"Patrons\": {\n    \"UserID\": \"<integer>\",\n    \"Email\": \"<string>\",\n    \"Name\": \"<string>\",\n    \"Salt\": \"<string>\",\n    \"HashPW\": \"<string>\"\n  }\n}"
										}
									]
								}
							]
						},
						{
							"name": "User",
							"item": [
								{
									"name": "{rowId}",
									"item": [
										{
											"name": "User read",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/User/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"User",
														":rowId"
													],
													"query": [
														{
															"key": "fields",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Read a row data by using the **primary key** column value."
											},
											"response": [
												{
													"name": "Created",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/User/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"User",
																":rowId"
															],
															"query": [
																{
																	"key": "fields",
																	"value": "<string>",
																	"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"UserID\": \"<integer>\",\n  \"UserName\": \"<string>\",\n  \"Email\": \"<string>\",\n  \"Name\": \"<string>\",\n  \"IsAdmin\": \"<integer>\",\n  \"Salt\": \"<string>\",\n  \"HashPW\": \"<string>\",\n  \"Product List\": {\n    \"ID\": \"<integer>\",\n    \"Name\": \"<string>\",\n    \"Author\": \"<string>\",\n    \"Description\": \"<string>\",\n    \"Genre\": \"<integer>\",\n    \"SubGenre\": \"<integer>\",\n    \"Published\": \"<string>\",\n    \"LastUpdatedBy\": \"<string>\",\n    \"LastUpdated\": \"<string>\"\n  }\n}"
												}
											]
										},
										{
											"name": "User update",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/User/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"User",
														":rowId"
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/User/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"User",
																":rowId"
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"UserID\": \"<integer>\",\n  \"UserName\": \"<string>\",\n  \"Email\": \"<string>\",\n  \"Name\": \"<string>\",\n  \"IsAdmin\": \"<integer>\",\n  \"Salt\": \"<string>\",\n  \"HashPW\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "User delete",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/User/:rowId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"User",
														":rowId"
													],
													"variable": [
														{
															"key": "rowId",
															"value": "<string>",
															"description": "(Required) Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
														}
													]
												},
												"description": "Delete a row by using the **primary key** column value."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/User/:rowId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"User",
																":rowId"
															],
															"variable": [
																{
																	"key": "rowId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "count",
									"item": [
										{
											"name": "User count",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/User/count",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"User",
														"count"
													],
													"query": [
														{
															"key": "where",
															"value": "<string>",
															"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
															"disabled": true
														}
													]
												},
												"description": "Get rows count of a table by applying optional filters."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "xc-auth",
																"value": "<API Key>",
																"description": "Added as a part of security scheme: apikey"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/inft3050/User/count",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"inft3050",
																"User",
																"count"
															],
															"query": [
																{
																	"key": "where",
																	"value": "<string>",
																	"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
																	"disabled": true
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										}
									]
								},
								{
									"name": "User list",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/inft3050/User",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"inft3050",
												"User"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>",
													"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "<string>",
													"description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`",
													"disabled": true
												},
												{
													"key": "where",
													"value": "<string>",
													"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "<number>",
													"description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
													"disabled": true
												},
												{
													"key": "shuffle",
													"value": "<number>",
													"description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "<number>",
													"description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
													"disabled": true
												},
												{
													"key": "nested[Product List][where]",
													"value": "<string>",
													"description": "This can be used for filtering rows in nested column `Product List`, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `nested[Product List][where]=(field1,eq,value)`",
													"disabled": true
												},
												{
													"key": "nested[Product List][offset]",
													"value": "<number>",
													"description": "The `offset` parameter used for pagination  of nested `Product List` rows, the value helps to select collection from a certain index.",
													"disabled": true
												},
												{
													"key": "nested[Product List][limit]",
													"value": "<number>",
													"description": "The `limit` parameter used for pagination of nested `Product List` rows, the response collection size depends on limit value and default value is `25`.",
													"disabled": true
												},
												{
													"key": "nested[Product List][fields]",
													"value": "<string>",
													"description": "Array of field names or comma separated filed names to include in the in nested column `Product List` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Product List][fields]=field1,field2`",
													"disabled": true
												},
												{
													"key": "nested[Product List][sort]",
													"value": "<string>",
													"description": "Comma separated field names to sort rows in nested column `Product List` rows, it will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `nested[Product List][sort]=field1,-field2`",
													"disabled": true
												}
											]
										},
										"description": "List of all rows from User table and response data fields can be filtered based on query params."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "xc-auth",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/User",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"User"
													],
													"query": [
														{
															"key": "fields",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.",
															"disabled": true
														},
														{
															"key": "sort",
															"value": "<string>",
															"description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`",
															"disabled": true
														},
														{
															"key": "where",
															"value": "<string>",
															"description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "<number>",
															"description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
															"disabled": true
														},
														{
															"key": "shuffle",
															"value": "<number>",
															"description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
															"disabled": true
														},
														{
															"key": "offset",
															"value": "<number>",
															"description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
															"disabled": true
														},
														{
															"key": "nested[Product List][where]",
															"value": "<string>",
															"description": "This can be used for filtering rows in nested column `Product List`, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `nested[Product List][where]=(field1,eq,value)`",
															"disabled": true
														},
														{
															"key": "nested[Product List][offset]",
															"value": "<number>",
															"description": "The `offset` parameter used for pagination  of nested `Product List` rows, the value helps to select collection from a certain index.",
															"disabled": true
														},
														{
															"key": "nested[Product List][limit]",
															"value": "<number>",
															"description": "The `limit` parameter used for pagination of nested `Product List` rows, the response collection size depends on limit value and default value is `25`.",
															"disabled": true
														},
														{
															"key": "nested[Product List][fields]",
															"value": "<string>",
															"description": "Array of field names or comma separated filed names to include in the in nested column `Product List` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[Product List][fields]=field1,field2`",
															"disabled": true
														},
														{
															"key": "nested[Product List][sort]",
															"value": "<string>",
															"description": "Comma separated field names to sort rows in nested column `Product List` rows, it will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `nested[Product List][sort]=field1,-field2`",
															"disabled": true
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"list\": [\n    {\n      \"UserID\": \"<integer>\",\n      \"UserName\": \"<string>\",\n      \"Email\": \"<string>\",\n      \"Name\": \"<string>\",\n      \"IsAdmin\": \"<integer>\",\n      \"Salt\": \"<string>\",\n      \"HashPW\": \"<string>\",\n      \"Product List\": {\n        \"ID\": \"<integer>\",\n        \"Name\": \"<string>\",\n        \"Author\": \"<string>\",\n        \"Description\": \"<string>\",\n        \"Genre\": \"<integer>\",\n        \"SubGenre\": \"<integer>\",\n        \"Published\": \"<string>\",\n        \"LastUpdatedBy\": \"<string>\",\n        \"LastUpdated\": \"<string>\"\n      }\n    },\n    {\n      \"UserID\": \"<integer>\",\n      \"UserName\": \"<string>\",\n      \"Email\": \"<string>\",\n      \"Name\": \"<string>\",\n      \"IsAdmin\": \"<integer>\",\n      \"Salt\": \"<string>\",\n      \"HashPW\": \"<string>\",\n      \"Product List\": {\n        \"ID\": \"<integer>\",\n        \"Name\": \"<string>\",\n        \"Author\": \"<string>\",\n        \"Description\": \"<string>\",\n        \"Genre\": \"<integer>\",\n        \"SubGenre\": \"<integer>\",\n        \"Published\": \"<string>\",\n        \"LastUpdatedBy\": \"<string>\",\n        \"LastUpdated\": \"<string>\"\n      }\n    }\n  ],\n  \"PageInfo\": {\n    \"pageSize\": \"<integer>\",\n    \"totalRows\": \"<integer>\",\n    \"isFirstPage\": \"<boolean>\",\n    \"isLastPage\": \"<boolean>\",\n    \"page\": \"<number>\"\n  }\n}"
										}
									]
								},
								{
									"name": "User create",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"UserName\": \"<string>\",\n  \"Email\": \"<string>\",\n  \"Name\": \"<string>\",\n  \"IsAdmin\": \"false\",\n  \"Salt\": \"<string>\",\n  \"HashPW\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/inft3050/User",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"inft3050",
												"User"
											]
										},
										"description": "Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "xc-auth",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"UserID\": \"<integer>\",\n  \"UserName\": \"<string>\",\n  \"Email\": \"<string>\",\n  \"Name\": \"<string>\",\n  \"IsAdmin\": \"<integer>\",\n  \"Salt\": \"<string>\",\n  \"HashPW\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/inft3050/User",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"inft3050",
														"User"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"UserID\": \"<integer>\",\n  \"UserName\": \"<string>\",\n  \"Email\": \"<string>\",\n  \"Name\": \"<string>\",\n  \"IsAdmin\": \"<integer>\",\n  \"Salt\": \"<string>\",\n  \"HashPW\": \"<string>\",\n  \"Product List\": {\n    \"ID\": \"<integer>\",\n    \"Name\": \"<string>\",\n    \"Author\": \"<string>\",\n    \"Description\": \"<string>\",\n    \"Genre\": \"<integer>\",\n    \"SubGenre\": \"<integer>\",\n    \"Published\": \"<string>\",\n    \"LastUpdatedBy\": \"<string>\",\n    \"LastUpdated\": \"<string>\"\n  }\n}"
										}
									]
								}
							]
						},
						{
							"name": "Login",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"username\":\"adminAccount\",\"password\":\"adminPW\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"username\":\"adminAccount\",\"password\":\"adminPW\"}"
								},
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Profile",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"username\":\"adminAccount\",\"password\":\"adminPW\"}"
								},
								"url": {
									"raw": "{{baseUrl}}/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"me"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3001"
		}
	]
}